						<?php
//
// File generated by ... on the 2022-04-24T22:55:36+0200
// Please do not edit manually
//

/**
 * Classes and menus for itop-profiles-itil (version 2.5.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
//
// List of constant profiles
// - used by the class URP_Profiles at setup (create/update/delete records)
// - used by the addon UserRightsProfile to determine user rights
//
class ProfilesConfig
{
	protected static $aPROFILES = array (
  1 => 
  array (
    'name' => 'Administrator',
    'description' => 'Has the rights on everything (bypassing any control)',
  ),
  1024 => 
  array (
    'name' => 'REST Services User',
    'description' => 'Only users having this profile are allowed to use the REST Web Services (unless \'secure_rest_services\' is set to false in the configuration file).',
  ),
  3 => 
  array (
    'name' => 'Configuration Manager',
    'description' => 'Person in charge of the documentation of the managed CIs',
  ),
  11 => 
  array (
    'name' => 'Document author',
    'description' => 'Any person who could contribute to documentation',
  ),
  12 => 
  array (
    'name' => 'Portal power user',
    'description' => 'Users having this profile will have the rights to see all the tickets for a customer in the portal. Must be used in conjunction with other profiles (e.g. Portal User).',
  ),
  20 => 
  array (
    'name' => 'Hostmaster',
    'description' => 'Person handling the IP space and looking after the IP changes',
  ),
  5323 => 
  array (
    'name' => 'Guest',
    'description' => 'Person with read only rights (no bulk read allowed) on CMDB objects (only)',
  ),
);

	protected static $aGRANTS = array (
  '3_Organization_w' => true,
  '3_Organization+_w' => true,
  '3_Location_w' => true,
  '3_Location+_w' => true,
  '3_Contact_w' => true,
  '3_Contact+_w' => true,
  '3_Organization_bw' => true,
  '3_Organization+_bw' => true,
  '3_Location_bw' => true,
  '3_Location+_bw' => true,
  '3_Contact_bw' => true,
  '3_Contact+_bw' => true,
  '3_Organization_d' => true,
  '3_Organization+_d' => true,
  '3_Location_d' => true,
  '3_Location+_d' => true,
  '3_Contact_d' => true,
  '3_Contact+_d' => true,
  '3_Document_w' => true,
  '3_Document+_w' => true,
  '3_Document_bw' => true,
  '3_Document+_bw' => true,
  '3_Document_d' => true,
  '3_Document+_d' => true,
  '3_Licence_w' => true,
  '3_Licence+_w' => true,
  '3_Subnet_w' => true,
  '3_Subnet+_w' => true,
  '3_Patch_w' => true,
  '3_Patch+_w' => true,
  '3_Software_w' => true,
  '3_Software+_w' => true,
  '3_FunctionalCI_w' => true,
  '3_FunctionalCI+_w' => true,
  '3_NetworkInterface_w' => true,
  '3_NetworkInterface+_w' => true,
  '3_Group_w' => true,
  '3_Group+_w' => true,
  '3_Typology_w' => true,
  '3_Typology+_w' => true,
  '3_NASFileSystem_w' => true,
  '3_NASFileSystem+_w' => true,
  '3_LogicalVolume_w' => true,
  '3_LogicalVolume+_w' => true,
  '3_Tape_w' => true,
  '3_Tape+_w' => true,
  '3_VLAN_w' => true,
  '3_VLAN+_w' => true,
  '3_Licence_bw' => true,
  '3_Licence+_bw' => true,
  '3_Subnet_bw' => true,
  '3_Subnet+_bw' => true,
  '3_Patch_bw' => true,
  '3_Patch+_bw' => true,
  '3_Software_bw' => true,
  '3_Software+_bw' => true,
  '3_FunctionalCI_bw' => true,
  '3_FunctionalCI+_bw' => true,
  '3_NetworkInterface_bw' => true,
  '3_NetworkInterface+_bw' => true,
  '3_Group_bw' => true,
  '3_Group+_bw' => true,
  '3_Typology_bw' => true,
  '3_Typology+_bw' => true,
  '3_NASFileSystem_bw' => true,
  '3_NASFileSystem+_bw' => true,
  '3_LogicalVolume_bw' => true,
  '3_LogicalVolume+_bw' => true,
  '3_Tape_bw' => true,
  '3_Tape+_bw' => true,
  '3_VLAN_bw' => true,
  '3_VLAN+_bw' => true,
  '3_Licence_d' => true,
  '3_Licence+_d' => true,
  '3_Subnet_d' => true,
  '3_Subnet+_d' => true,
  '3_Patch_d' => true,
  '3_Patch+_d' => true,
  '3_Software_d' => true,
  '3_Software+_d' => true,
  '3_FunctionalCI_d' => true,
  '3_FunctionalCI+_d' => true,
  '3_NetworkInterface_d' => true,
  '3_NetworkInterface+_d' => true,
  '3_Group_d' => true,
  '3_Group+_d' => true,
  '3_Typology_d' => true,
  '3_Typology+_d' => true,
  '3_NASFileSystem_d' => true,
  '3_NASFileSystem+_d' => true,
  '3_LogicalVolume_d' => true,
  '3_LogicalVolume+_d' => true,
  '3_Tape_d' => true,
  '3_Tape+_d' => true,
  '3_VLAN_d' => true,
  '3_VLAN+_d' => true,
  '3_*_r' => true,
  '3_*+_r' => true,
  '3_*_br' => true,
  '3_*+_br' => true,
  '3_DNSObject_w' => true,
  '3_DNSObject+_w' => true,
  '3_WANLink_w' => true,
  '3_WANLink+_w' => true,
  '3_WANType_w' => true,
  '3_WANType+_w' => true,
  '3_ASNumber_w' => true,
  '3_ASNumber+_w' => true,
  '3_VRF_w' => true,
  '3_VRF+_w' => true,
  '3_lnkPhysicalInterfaceToVRF_w' => true,
  '3_lnkPhysicalInterfaceToVRF+_w' => true,
  '3_DNSObject_bw' => true,
  '3_DNSObject+_bw' => true,
  '3_WANLink_bw' => true,
  '3_WANLink+_bw' => true,
  '3_WANType_bw' => true,
  '3_WANType+_bw' => true,
  '3_ASNumber_bw' => true,
  '3_ASNumber+_bw' => true,
  '3_VRF_bw' => true,
  '3_VRF+_bw' => true,
  '3_lnkPhysicalInterfaceToVRF_bw' => true,
  '3_lnkPhysicalInterfaceToVRF+_bw' => true,
  '3_DNSObject_d' => true,
  '3_DNSObject+_d' => true,
  '3_WANLink_d' => true,
  '3_WANLink+_d' => true,
  '3_WANType_d' => true,
  '3_WANType+_d' => true,
  '3_ASNumber_d' => true,
  '3_ASNumber+_d' => true,
  '3_VRF_d' => true,
  '3_VRF+_d' => true,
  '3_lnkPhysicalInterfaceToVRF_d' => true,
  '3_lnkPhysicalInterfaceToVRF+_d' => true,
  '3_IPObject_w' => true,
  '3_IPObject+_w' => true,
  '3_IPConfig_w' => true,
  '3_IPConfig+_w' => true,
  '3_IPRangeUsage_w' => true,
  '3_IPRangeUsage+_w' => true,
  '3_IPUsage_w' => true,
  '3_IPUsage+_w' => true,
  '3_IPObject_bw' => true,
  '3_IPObject+_bw' => true,
  '3_IPConfig_bw' => true,
  '3_IPConfig+_bw' => true,
  '3_IPRangeUsage_bw' => true,
  '3_IPRangeUsage+_bw' => true,
  '3_IPUsage_bw' => true,
  '3_IPUsage+_bw' => true,
  '3_IPObject_d' => true,
  '3_IPObject+_d' => true,
  '3_IPConfig_d' => true,
  '3_IPConfig+_d' => true,
  '3_IPRangeUsage_d' => true,
  '3_IPRangeUsage+_d' => true,
  '3_IPUsage_d' => true,
  '3_IPUsage+_d' => true,
  '3_lnkContactToIPObject_w' => true,
  '3_lnkContactToIPObject+_w' => true,
  '3_lnkDocToIPObject_w' => true,
  '3_lnkDocToIPObject+_w' => true,
  '3_lnkIPObjectToTicket_w' => true,
  '3_lnkIPObjectToTicket+_w' => true,
  '3_lnkIPBlockToLocation_w' => true,
  '3_lnkIPBlockToLocation+_w' => true,
  '3_lnkIPSubnetToVLAN_w' => true,
  '3_lnkIPSubnetToVLAN+_w' => true,
  '3_lnkIPSubnetToLocation_w' => true,
  '3_lnkIPSubnetToLocation+_w' => true,
  '3_lnkIPAdressToIPAddress_w' => true,
  '3_lnkIPAdressToIPAddress+_w' => true,
  '3_lnkContactToIPObject_bw' => true,
  '3_lnkContactToIPObject+_bw' => true,
  '3_lnkDocToIPObject_bw' => true,
  '3_lnkDocToIPObject+_bw' => true,
  '3_lnkIPObjectToTicket_bw' => true,
  '3_lnkIPObjectToTicket+_bw' => true,
  '3_lnkIPBlockToLocation_bw' => true,
  '3_lnkIPBlockToLocation+_bw' => true,
  '3_lnkIPSubnetToVLAN_bw' => true,
  '3_lnkIPSubnetToVLAN+_bw' => true,
  '3_lnkIPSubnetToLocation_bw' => true,
  '3_lnkIPSubnetToLocation+_bw' => true,
  '3_lnkIPAdressToIPAddress_bw' => true,
  '3_lnkIPAdressToIPAddress+_bw' => true,
  '3_lnkContactToIPObject_d' => true,
  '3_lnkContactToIPObject+_d' => true,
  '3_lnkDocToIPObject_d' => true,
  '3_lnkDocToIPObject+_d' => true,
  '3_lnkIPObjectToTicket_d' => true,
  '3_lnkIPObjectToTicket+_d' => true,
  '3_lnkIPBlockToLocation_d' => true,
  '3_lnkIPBlockToLocation+_d' => true,
  '3_lnkIPSubnetToVLAN_d' => true,
  '3_lnkIPSubnetToVLAN+_d' => true,
  '3_lnkIPSubnetToLocation_d' => true,
  '3_lnkIPSubnetToLocation+_d' => true,
  '3_lnkIPAdressToIPAddress_d' => true,
  '3_lnkIPAdressToIPAddress+_d' => true,
  '11_Document_w' => true,
  '11_Document+_w' => true,
  '11_Document_bw' => true,
  '11_Document+_bw' => true,
  '11_Document_d' => true,
  '11_Document+_d' => true,
  '11_*_r' => true,
  '11_*+_r' => true,
  '11_*_br' => true,
  '11_*+_br' => true,
  '11_lnkContactToIPObject_d' => true,
  '11_lnkContactToIPObject+_d' => true,
  '11_lnkDocToIPObject_d' => true,
  '11_lnkDocToIPObject+_d' => true,
  '11_lnkIPObjectToTicket_d' => true,
  '11_lnkIPObjectToTicket+_d' => true,
  '11_lnkIPBlockToLocation_d' => true,
  '11_lnkIPBlockToLocation+_d' => true,
  '11_lnkIPSubnetToVLAN_d' => true,
  '11_lnkIPSubnetToVLAN+_d' => true,
  '11_lnkIPSubnetToLocation_d' => true,
  '11_lnkIPSubnetToLocation+_d' => true,
  '11_lnkIPAdressToIPAddress_d' => true,
  '11_lnkIPAdressToIPAddress+_d' => true,
  '20_IPObject_w' => true,
  '20_IPObject+_w' => true,
  '20_IPConfig_w' => true,
  '20_IPConfig+_w' => true,
  '20_IPRangeUsage_w' => true,
  '20_IPRangeUsage+_w' => true,
  '20_IPUsage_w' => true,
  '20_IPUsage+_w' => true,
  '20_IPObject_bw' => true,
  '20_IPObject+_bw' => true,
  '20_IPConfig_bw' => true,
  '20_IPConfig+_bw' => true,
  '20_IPRangeUsage_bw' => true,
  '20_IPRangeUsage+_bw' => true,
  '20_IPUsage_bw' => true,
  '20_IPUsage+_bw' => true,
  '20_IPObject_d' => true,
  '20_IPObject+_d' => true,
  '20_IPConfig_d' => true,
  '20_IPConfig+_d' => true,
  '20_IPRangeUsage_d' => true,
  '20_IPRangeUsage+_d' => true,
  '20_IPUsage_d' => true,
  '20_IPUsage+_d' => true,
  '20_IPObject_bd' => true,
  '20_IPObject+_bd' => true,
  '20_IPConfig_bd' => true,
  '20_IPConfig+_bd' => true,
  '20_IPRangeUsage_bd' => true,
  '20_IPRangeUsage+_bd' => true,
  '20_IPUsage_bd' => true,
  '20_IPUsage+_bd' => true,
  '20_lnkContactToIPObject_w' => true,
  '20_lnkContactToIPObject+_w' => true,
  '20_lnkDocToIPObject_w' => true,
  '20_lnkDocToIPObject+_w' => true,
  '20_lnkIPObjectToTicket_w' => true,
  '20_lnkIPObjectToTicket+_w' => true,
  '20_lnkIPBlockToLocation_w' => true,
  '20_lnkIPBlockToLocation+_w' => true,
  '20_lnkIPSubnetToVLAN_w' => true,
  '20_lnkIPSubnetToVLAN+_w' => true,
  '20_lnkIPSubnetToLocation_w' => true,
  '20_lnkIPSubnetToLocation+_w' => true,
  '20_lnkIPAdressToIPAddress_w' => true,
  '20_lnkIPAdressToIPAddress+_w' => true,
  '20_lnkContactToIPObject_bw' => true,
  '20_lnkContactToIPObject+_bw' => true,
  '20_lnkDocToIPObject_bw' => true,
  '20_lnkDocToIPObject+_bw' => true,
  '20_lnkIPObjectToTicket_bw' => true,
  '20_lnkIPObjectToTicket+_bw' => true,
  '20_lnkIPBlockToLocation_bw' => true,
  '20_lnkIPBlockToLocation+_bw' => true,
  '20_lnkIPSubnetToVLAN_bw' => true,
  '20_lnkIPSubnetToVLAN+_bw' => true,
  '20_lnkIPSubnetToLocation_bw' => true,
  '20_lnkIPSubnetToLocation+_bw' => true,
  '20_lnkIPAdressToIPAddress_bw' => true,
  '20_lnkIPAdressToIPAddress+_bw' => true,
  '20_lnkContactToIPObject_d' => true,
  '20_lnkContactToIPObject+_d' => true,
  '20_lnkDocToIPObject_d' => true,
  '20_lnkDocToIPObject+_d' => true,
  '20_lnkIPObjectToTicket_d' => true,
  '20_lnkIPObjectToTicket+_d' => true,
  '20_lnkIPBlockToLocation_d' => true,
  '20_lnkIPBlockToLocation+_d' => true,
  '20_lnkIPSubnetToVLAN_d' => true,
  '20_lnkIPSubnetToVLAN+_d' => true,
  '20_lnkIPSubnetToLocation_d' => true,
  '20_lnkIPSubnetToLocation+_d' => true,
  '20_lnkIPAdressToIPAddress_d' => true,
  '20_lnkIPAdressToIPAddress+_d' => true,
  '20_lnkContactToIPObject_bd' => true,
  '20_lnkContactToIPObject+_bd' => true,
  '20_lnkDocToIPObject_bd' => true,
  '20_lnkDocToIPObject+_bd' => true,
  '20_lnkIPObjectToTicket_bd' => true,
  '20_lnkIPObjectToTicket+_bd' => true,
  '20_lnkIPBlockToLocation_bd' => true,
  '20_lnkIPBlockToLocation+_bd' => true,
  '20_lnkIPSubnetToVLAN_bd' => true,
  '20_lnkIPSubnetToVLAN+_bd' => true,
  '20_lnkIPSubnetToLocation_bd' => true,
  '20_lnkIPSubnetToLocation+_bd' => true,
  '20_lnkIPAdressToIPAddress_bd' => true,
  '20_lnkIPAdressToIPAddress+_bd' => true,
  '20_DNSObject_w' => true,
  '20_DNSObject+_w' => true,
  '20_WANLink_w' => true,
  '20_WANLink+_w' => true,
  '20_WANType_w' => true,
  '20_WANType+_w' => true,
  '20_ASNumber_w' => true,
  '20_ASNumber+_w' => true,
  '20_VRF_w' => true,
  '20_VRF+_w' => true,
  '20_lnkPhysicalInterfaceToVRF_w' => true,
  '20_lnkPhysicalInterfaceToVRF+_w' => true,
  '20_DNSObject_bw' => true,
  '20_DNSObject+_bw' => true,
  '20_WANLink_bw' => true,
  '20_WANLink+_bw' => true,
  '20_WANType_bw' => true,
  '20_WANType+_bw' => true,
  '20_ASNumber_bw' => true,
  '20_ASNumber+_bw' => true,
  '20_VRF_bw' => true,
  '20_VRF+_bw' => true,
  '20_lnkPhysicalInterfaceToVRF_bw' => true,
  '20_lnkPhysicalInterfaceToVRF+_bw' => true,
  '20_DNSObject_d' => true,
  '20_DNSObject+_d' => true,
  '20_WANLink_d' => true,
  '20_WANLink+_d' => true,
  '20_WANType_d' => true,
  '20_WANType+_d' => true,
  '20_ASNumber_d' => true,
  '20_ASNumber+_d' => true,
  '20_VRF_d' => true,
  '20_VRF+_d' => true,
  '20_lnkPhysicalInterfaceToVRF_d' => true,
  '20_lnkPhysicalInterfaceToVRF+_d' => true,
  '20_DNSObject_bd' => true,
  '20_DNSObject+_bd' => true,
  '20_WANLink_bd' => true,
  '20_WANLink+_bd' => true,
  '20_WANType_bd' => true,
  '20_WANType+_bd' => true,
  '20_ASNumber_bd' => true,
  '20_ASNumber+_bd' => true,
  '20_VRF_bd' => true,
  '20_VRF+_bd' => true,
  '20_lnkPhysicalInterfaceToVRF_bd' => true,
  '20_lnkPhysicalInterfaceToVRF+_bd' => true,
  '20_*_r' => true,
  '20_*+_r' => true,
  '20_*_br' => true,
  '20_*+_br' => true,
  '5323_*_r' => true,
  '5323_*+_r' => true,
);

	protected static $aLINKTOCLASSES = array (
  'lnkDocumentToLicence' => 
  array (
    0 => 'Licence',
    1 => 'Document',
  ),
  'lnkDocumentToPatch' => 
  array (
    0 => 'Patch',
    1 => 'Document',
  ),
  'lnkSoftwareInstanceToSoftwarePatch' => 
  array (
    0 => 'SoftwarePatch',
    1 => 'SoftwareInstance',
  ),
  'lnkFunctionalCIToOSPatch' => 
  array (
    0 => 'OSPatch',
    1 => 'FunctionalCI',
  ),
  'lnkDocumentToSoftware' => 
  array (
    0 => 'Software',
    1 => 'Document',
  ),
  'lnkContactToFunctionalCI' => 
  array (
    0 => 'FunctionalCI',
    1 => 'Contact',
  ),
  'lnkDocumentToFunctionalCI' => 
  array (
    0 => 'FunctionalCI',
    1 => 'Document',
  ),
  'lnkPhysicalInterfaceToVLAN' => 
  array (
    0 => 'PhysicalInterface',
    1 => 'VLAN',
  ),
  'lnkConnectableCIToNetworkDevice' => 
  array (
    0 => 'NetworkDevice',
    1 => 'ConnectableCI',
  ),
  'lnkApplicationSolutionToFunctionalCI' => 
  array (
    0 => 'ApplicationSolution',
    1 => 'FunctionalCI',
  ),
  'lnkApplicationSolutionToBusinessProcess' => 
  array (
    0 => 'BusinessProcess',
    1 => 'ApplicationSolution',
  ),
  'lnkPersonToTeam' => 
  array (
    0 => 'Team',
    1 => 'Person',
  ),
  'lnkGroupToCI' => 
  array (
    0 => 'Group',
    1 => 'FunctionalCI',
  ),
  'lnkServerToVolume' => 
  array (
    0 => 'LogicalVolume',
    1 => 'Server',
  ),
  'lnkSanToDatacenterDevice' => 
  array (
    0 => 'SANSwitch',
    1 => 'DatacenterDevice',
  ),
  'lnkContactToTicket' => 
  array (
    0 => 'Ticket',
    1 => 'Contact',
  ),
  'lnkFunctionalCIToTicket' => 
  array (
    0 => 'Ticket',
    1 => 'FunctionalCI',
  ),
  'lnkPhysicalInterfaceToVRF' => 
  array (
    0 => 'PhysicalInterface',
    1 => 'VRF',
  ),
  'lnkVirtualDeviceToVolume' => 
  array (
    0 => 'LogicalVolume',
    1 => 'VirtualDevice',
  ),
  'lnkContactToIPObject' => 
  array (
    0 => 'IPObject',
    1 => 'Contact',
  ),
  'lnkDocToIPObject' => 
  array (
    0 => 'IPObject',
    1 => 'Document',
  ),
  'lnkIPObjectToTicket' => 
  array (
    0 => 'IPObject',
    1 => 'Ticket',
  ),
  'lnkIPBlockToLocation' => 
  array (
    0 => 'IPBlock',
    1 => 'Location',
  ),
  'lnkIPSubnetToVLAN' => 
  array (
    0 => 'IPSubnet',
    1 => 'VLAN',
  ),
  'lnkIPSubnetToVRF' => 
  array (
    0 => 'IPSubnet',
    1 => 'VRF',
  ),
  'lnkIPSubnetToLocation' => 
  array (
    0 => 'IPSubnet',
    1 => 'Location',
  ),
  'lnkIPAdressToIPAddress' => 
  array (
    0 => 'IPAddress',
    1 => 'IPAddress',
  ),
  'lnkIPInterfaceToIPAddress' => 
  array (
    0 => 'IPInterface',
    1 => 'IPAddress',
  ),
);

	// Now replaced by MetaModel::GetLinkClasses (working with 1.x)
	// This function could be deprecated
	public static function GetLinkClasses()
	{
		return self::$aLINKTOCLASSES;
	}

	public static function GetProfileActionGrant($iProfileId, $sClass, $sAction)
	{
		$bLegacyBehavior = MetaModel::GetConfig()->Get('user_rights_legacy');

		// Search for a grant, stoping if any deny is encountered (allowance implies the verification of all paths)
		$bAllow = null;

		// 1 - The class itself
		// 
		$sGrantKey = $iProfileId.'_'.$sClass.'_'.$sAction;
		if (isset(self::$aGRANTS[$sGrantKey]))
		{
			$bAllow = self::$aGRANTS[$sGrantKey];
			if ($bLegacyBehavior) return $bAllow;
			if (!$bAllow) return false;
		}

		// 2 - The parent classes, up to the root class
		// 
		foreach (MetaModel::EnumParentClasses($sClass, ENUM_PARENT_CLASSES_EXCLUDELEAF, false /*bRootFirst*/) as $sParent)
		{
			$sGrantKey = $iProfileId.'_'.$sParent.'+_'.$sAction;
			if (isset(self::$aGRANTS[$sGrantKey]))
			{
				$bAllow = self::$aGRANTS[$sGrantKey];
				if ($bLegacyBehavior) return $bAllow;
				if (!$bAllow) return false;
			}
		}

		// 3 - The related classes (if the current is an N-N link with DEL_AUTO/DEL_SILENT)
		//
		$bGrant = self::GetLinkActionGrant($iProfileId, $sClass, $sAction);
		if (!is_null($bGrant))
		{
			$bAllow = $bGrant;
			if ($bLegacyBehavior) return $bAllow;
			if (!$bAllow) return false;
		}

		// 4 - All (only for bizmodel)
		// As the profiles now manage also grant_by_profile category,
		// '*' is restricted to bizmodel to avoid openning the access for the existing profiles.
		// 
		if (MetaModel::HasCategory($sClass, 'bizmodel'))
		{ 
			$sGrantKey = $iProfileId.'_*_'.$sAction;
			if (isset(self::$aGRANTS[$sGrantKey]))
			{
				$bAllow = self::$aGRANTS[$sGrantKey];
				if ($bLegacyBehavior) return $bAllow;
				if (!$bAllow) return false;
			}
		}
		
		// null or true
		return $bAllow;
	}	

	public static function GetProfileStimulusGrant($iProfileId, $sClass, $sStimulus)
	{
		$sGrantKey = $iProfileId.'_'.$sClass.'_s_'.$sStimulus;
		if (isset(self::$aGRANTS[$sGrantKey]))
		{
			return self::$aGRANTS[$sGrantKey];
		}
		$sGrantKey = $iProfileId.'_*_s_'.$sStimulus;
		if (isset(self::$aGRANTS[$sGrantKey]))
		{
			return self::$aGRANTS[$sGrantKey];
		}
		return null;
	}

	// returns an array of id => array of column => php value(so-called "real value")
	public static function GetProfilesValues()
	{
		return self::$aPROFILES;
	}

	// Propagate the rights on classes onto the links themselves (the external keys must have DEL_AUTO or DEL_SILENT
	//
	protected static function GetLinkActionGrant($iProfileId, $sClass, $sAction)
	{
		if (array_key_exists($sClass, self::$aLINKTOCLASSES))
		{
			// Get the grant for the remote classes. The resulting grant is:
			// - One YES => YES
			// - 100% undefined => undefined
			// - otherwise => NO
			//

			// Having write allowed on the remote class implies write + delete on the N-N link class
			if ($sAction == 'd')
			{
				$sRemoteAction = 'w';
			}
			elseif ($sAction == 'bd')
			{
				$sRemoteAction = 'bw';
			}
			else
			{
				$sRemoteAction = $sAction;
			}

			foreach (self::$aLINKTOCLASSES[$sClass] as $sRemoteClass)
			{
				$bUndefined = true;
				$bGrant = self::GetProfileActionGrant($iProfileId, $sRemoteClass, $sAction);
				if ($bGrant === true)
				{
					return true;
				}
				if ($bGrant === false)
				{
					$bUndefined = false;
				}
			}
			if (!$bUndefined)
			{
				return false;
			}
		}
		return null;
	}
}
